https://github.com/vercel/next-learn/tree/master/basics

iniciando com typescript:  https://nextjs.org/learn/excel/typescript/create-tsconfig

typesccriptt: https://github.com/vercel/next-learn/tree/master/basics/basics-final

- Create a Next.js App - Criar um aplicativo Next.js
- Navigate Between Pages - Navegue entre as páginas
- Assets, Metadata, and CSS 
- Pre-rendering and Data Fetching - Pré-renderização e busca de dados
- Routes dinamic - rotas dinamiccasa

- o next tem o contexto de usar o server side rendering(SSR - renderização no lado do SERVIDOR), 
ajuda no desenpenho de carregamento da pagina e melhorias no motor de otimização de busca do google.
  
- Quando você deve usar a renderização do lado do CLIENTE, Páginas privadas e específicas do 
usuário em que o SEO(Search engine optimization - Motor de Otimização de Busca) não é relevante.

-Recomendamos o uso de Geração Estática(Static Generation - com e sem dados) sempre que possível, pois 
sua página pode ser construída uma vez e servida por CDN, o que a torna muito mais rápida do que ter 
um servidor renderizando a página a cada solicitação, ou seja, pré-renderiza a página antes da 
solicitação de um usuário!!! - getStaticProps

- Se sua página mostra dados atualizados com frequência e o conteúdo da página mude a cada solicitação.
Então use o SSR(Server-side Rendering - renderização do lado servidor) - getServerSideProps

- arquivos estaticos(imagens, txt, svg) sao sempre colocados nas pastas PUBLIC

- os estilos globais sao sempre colocados em pages/_app.js

- pre renderização:  Por padrão, o Next.js pré-renderiza cada página. Isso significa que o 
Next.js gera HTML para cada página com antecedência, em vez de fazer tudo por JavaScript do 
lado do cliente. A pré-renderização pode resultar em melhor desempenho e Search engine optimization(SEO) - 
Motor de Otimização de Busca

- Duas formas de pré-renderização: Static Generation(geração estatica - pré renderização) e Server-side 
Rendering(Renderização do lado do servidor)
  
- Static Generation(geração estatica):é o método de pré-renderização que gera o HTML em tempo de construção. 
O HTML pré-renderizado é então REUTILIZADO em cada solicitação.
  
- Static Generation com dados, use-se o getStaticProps

- getStaticProps: pré-renderiza esta página em tempo de construção usando as props
(metadados, dados do banco, chamada API) retornadas por getStaticProps.

- getServerSideProps:Você deve usar getServerSideProps somente se precisar pré-renderizar uma página cujos 
dados devem ser buscados no momento da solicitação.

- getStaticPaths: para rotas com parametros

- SSR:Server-side Rendering(Renderização do lado do servidor):é o método de pré-renderização que GERA o 
HTML em cada solicitação.

rotas

- htttp://localhost:3333/posts/first-post
- htttp://localhost:3333/posts/two-post
- - htttp://localhost:3333/ --> pages/index

https://nextjs.org/learn/basics/data-fetching/pre-renderin

https://github.com/vercel/next-learn/tree/master/basics/dynamic-routes-starter

- Permite que seu aplicativo seja executado apenas no lado do servidor

- Recomendamos o uso de Geração Estática (com e sem dados) sempre que possível porque sua página pode ser 
construída uma vez e servida por CDN, o que torna muito mais rápido do que ter um servidor renderizando a 
página em cada solicitação.

- Essencialmente, getStaticProps permite que você diga ao Next.js: "Ei, esta página tem algumas dependências 
de dados - então, quando você pré-renderiza esta página em tempo de compilação, certifique-se de 
resolvê-los primeiro!"

- Primeiro, instale npm install gray-matter que nos permite analisar os metadados em cada arquivo 
de remarcação.

- Buscando dados no momento da solicitação: 
usa-se getServerSideProps https://nextjs.org/learn/basics/data-fetching/request-time

- recomendável se você estiver buscando dados no lado do cliente: SWR
https://nextjs.org/learn/basics/data-fetching/request-time

rotas dinamicas, cada usuario do blog terá uma pagina

Queremos que cada post tenha o caminho /posts/<id>, onde <id>é o nome do arquivo 
markdown no postsdiretório de nível superior.

Como temos ssg-ssr.mde pre-rendering.md, gostaríamos que os caminhos 
fossem /posts/ssg-ssre /posts/pre-rendering.

 getStaticPaths:  gera páginas estaticamente com rotas dinâmicas

 rotas dinamicas temm identificação [ ] 


npm install date-fns

npm install gray-matter

Se o fallback for false, qualquer caminho não retornado por getStaticPaths resultará em uma página 404.


function Blog({ posts }: {posts: title: string}) {
  return (
    <ul>
      {posts && posts.map((post) => (
        <li>{post.title}</li>
      ))}
    </ul>
  )
}

export const getStaticProps: GetStaticProps = () => {
  const res = await fetch('https://.../posts')
  const posts = await res.json()
  return {
    props: {
      posts,
    },
  }
}

export default Blog

-------------------------------------------------------------------------------------
gera páginas estaticamente com rotas dinâmicas(parametros de rotas com especificações)
exemplo gerar uma rota somente para aquele ID, o getStaticProps tras todos os dados para aquele
ID em especifico

export async function getStaticPaths() {
  const response = await fetch('https://github.com.br/lucasalvess96/user')
  const posts = await response.json()

  const paths = posts.map(post => ({
    params: { 
		id: post.id 
	},
  }))

  return { 
		paths, 
		fallback: false 
	}
}

-------------------------------------------------------------------------------------
ISR - Incremental Static Regeneration(Regeneração Estática Incremental)

O Next.js permite que você crie ou atualize páginas estáticas depois de criar seu site. 
A Regeneração Estática Incremental (ISR) 
permite que você use a geração estática por página, sem precisar reconstruir todo o site. 
Com o ISR, você pode manter os benefícios 
da estática enquanto escala para milhões de páginas.

function Blog({ posts }) {
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}

export async function getStaticProps() {
  const res = await fetch('https://.../posts')
  const posts = await res.json()

if (!res.ok) {
    throw new Error(`Failed to fetch posts, received status ${res.status}`)
  }


  return {
    props: {
      posts,
    },
  
    revalidate: 10, 
  }
}

export async function getStaticPaths() {
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  const paths = posts.map((post) => ({
    params: { 
	    id: post.id 
	},
  }))

  return { 
	paths, 
	fallback: 'blocking'
 }
}

export default Blog


Quando uma solicitação é feita para uma página que foi pré-renderizada em tempo de compilação, 
ela inicialmente mostrará a página em cache.
Quaisquer solicitações à página após a solicitação inicial e antes de 10 segundos também são armazenadas 
em cache e instantâneas.
Após a janela de 10 segundos, a próxima solicitação ainda mostrará a página em cache (obstante)
Next.js aciona uma regeneração da página em segundo plano.
Depois que a página for gerada com sucesso, o Next.js invalidará o cache e mostrará a página atualizada. 
Se a regeneração do plano de 
fundo falhar, a página antiga ainda permanecerá inalterada.


-------------------------------------------------------------------------------------
buscando dados no lado do cliente.

https://jsonplaceholder.typicode.com/users
SWR
ao inves de usar o useEffecct, usa o SWR
É altamente recomendado se você estiver buscando dados no lado do cliente.

import useSWR from 'swr'

const response = async () => {
	const getURL = await fetch("https://api.github.com/users/lucasalvess96/repos")
	const data = await response.json()
	return data
}

function Profile() {
  const { data, error } = useSWR('dashBoard',  response)

  if (error) return <div>Failed to load</div>
  if (!data) return <div>Loading...</div>

  return (
    <div>
      <h1>{data.id}</h1>
      <p>{data.name}</p>
    </div>
  )
}

-------------------------------------------------------------------------------------
https://nextjs.org/docs/middleware
Middleware
O middleware permite que você use o código sobre a configuração. Isso oferece total flexibilidade no 
Next.js, pois você pode executar o código antes que uma solicitação seja concluída. Com base na solicitação 
recebida do usuário, você pode modificar a resposta reescrevendo, redirecionando, adicionando cabeçalhos ou 
até mesmo transmitindo HTML.

-------------------------------------------------------------------------------------
dados devem ser buscados no momento da solicitação.
getServerSideProps é executado em todas as solicitações

export async function getServerSideProps(context) {
  return {
    props: {
      // props for your component
    }
  }
}

O Next.js pré-renderiza estaticamente todos os caminhos especificados por getStaticPaths.
getStaticPaths deve ser usado com getStaticProps. Você não pode usá-lo com getServerSideProps.
Precisamos retornar uma lista de valores possíveis para id.
precisamos implementar getStaticProps novamente - desta vez, para buscar os dados necessários para a postagem do 
blog com um determinado arquivo id. getStaticProps é dado params, que contém ID(porque o nome do arquivo é [id].js).

Cada objeto deve ter a params chave e conter um objeto com a id chave (porque estamos usando [id] no nome do arquivo). 
Caso contrário, getStaticPathsfalhará.

export function getAllPostIds() {
  const fileNames = fs.readdirSync(postsDirectory)

//Retorna um array parecido com este: 
  // [
  //   {
  //     params: {
  //       id: 'ssg-ssr'
  //     }
  //   },
  //   {
  //     params: {
  //       id: 'pre-rendering'
  //     }
  //   }
  // ]

  return fileNames.map(fileName => {
    return {
      params: {
        id: fileName.replace(/\.md$/, '')
      }
    }


Se fallbackfortrue : Os caminhos que não foram gerados no momento da compilação não resultarão em uma página 404. 
Em vez disso, o Next.js servirá uma versão "substituta" da página na primeira solicitação para esse caminho.


Se fallbackforblocking , os novos caminhos serão renderizados no lado do servidor com getStaticPropse armazenados em 
cache para solicitações futuras, de modo que isso aconteça apenas uma vez por caminho.
  })
}

https://nextjs.org/docs/basic-features/data-fetching/overview#the-paths-key-required

retornará os dados da postagem com base em id:
export function getPostData(id)


Como `params.id` from `getStaticProps({ params })` sabe que a chave é nomeada `id` ?

R= O valor do nome do arquivo

import { getAllPostIds } from '../../lib/posts'

export async function getStaticPaths() {
  const paths = getAllPostIds()
  return {
    paths,
    fallback: false
  }
}

contém a matriz de caminhos conhecidos retornados por getAllPostIds(), que incluem os parâmetros definidos 
por pages/posts/[id].js. 

export const getStaticPaths: GetStaticPaths = async () => {
    const paths = await fetch('https://url/api')
    const fileNames = await paths.json()
    fileNames.map(fileName => {
        return {
            params: {
                id: fileName.replace(/\.md$/, '')
            }
        }
     })

    return {
        paths,
        fallback: false
    }
}

https://nextjs.org/docs/advanced-features/middleware
O middleware permite que você use o código sobre a configuração. Isso oferece total 
flexibilidade no Next.js, pois você pode executar o código antes que uma solicitação seja concluída.
Você pode modificar a resposta reescrevendo, redirecionando, adicionando cabeçalhos ou até mesmo 
transmitindo HTML.
Você usa o middleware para alterar a resposta das solicitações e redirecionar o usuário de uma rota para outra.

Middleware pode ser usado para qualquer coisa que compartilhe lógica para um conjunto de páginas, incluindo:
- Autenticação (Authentication)
- Proteção de bot (Bot protection)
- Redireciona e reescreve (Redirects and rewrites)
- Manipulando navegadores não suportados (Handling unsupported browsers)
- Sinalizações de recursos e testes A/B (Feature flags and A/B tests)
- Requisitos avançados de roteamento i18n (Advanced i18n routing requirements)

redirect():redirecionar solicitações de redirecionamento de uma rota para outra rota.
rewrite(): reescreva sua resposta de saída.

components --> components de paginas
lib ou utils --> buscar dados do sistema, ect.
pages --> paginas
public --> arquivos estatico(fotos, json, svg, etc.)


import type { NextFetchEvent, NextRequest } from "next/server";
import { NextResponse } from "next/server";

export function middleware(req: NextRequest, ev: NextFetchEvent) {
  return NextResponse.rewrite("/underConstraction");
  
   or
  //return NextResponse.next()
 //return NextResponse.redirect()
}